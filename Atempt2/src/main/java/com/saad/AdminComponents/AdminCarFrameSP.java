/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.saad.AdminComponents;

import com.saad.ClientComponents.*;
import com.saad.Classes.Car;
import static com.saad.ClientComponents.ClientFrame.ClientCardPanel;
import com.saad.swing.ScrollBar;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.List;
import java.awt.RenderingHints;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author saadk
 */
public class AdminCarFrameSP extends javax.swing.JPanel {

    
        private LinkedList<Car> filteredCarList;

    /**
     * Creates new form SPAdminCarFrame
     */
    public AdminCarFrameSP() {
        initComponents();
        sp.setVerticalScrollBar(new ScrollBar());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp = new javax.swing.JScrollPane();
        adminCarFrame1 = new com.saad.AdminComponents.AdminCarFrame();
        jPanel1 = new javax.swing.JPanel();
        filterPanel1 = new com.saad.GlobalComponents.FilterPanel();
        filter = new com.saad.swing.SearchText();
        jLabel1 = new javax.swing.JLabel();
        jcb1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jcb2 = new javax.swing.JComboBox<>();

        sp.setBackground(new java.awt.Color(255, 255, 255));
        sp.setBorder(null);
        sp.setDoubleBuffered(true);

        adminCarFrame1.setOpaque(true);
        sp.setViewportView(adminCarFrame1);

        jPanel1.setBackground(new java.awt.Color(255, 204, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(102, 102, 102)));

        filter.setBackground(new java.awt.Color(255, 255, 255));
        filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filterKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Filter :");

        jcb1.setBackground(new java.awt.Color(84, 84, 84));
        jcb1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jcb1.setForeground(new java.awt.Color(0, 0, 0));
        jcb1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   -", "Price - Lower to Higher", "Price - Higher to Lower", "Occupied", "Unoccupied" }));
        jcb1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb1ItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Color :");

        jcb2.setBackground(new java.awt.Color(84, 84, 84));
        jcb2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jcb2.setForeground(new java.awt.Color(0, 0, 0));
        jcb2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Red", "Blue", "White", "Black", "Yellow", "Green" }));
        jcb2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb2ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout filterPanel1Layout = new javax.swing.GroupLayout(filterPanel1);
        filterPanel1.setLayout(filterPanel1Layout);
        filterPanel1Layout.setHorizontalGroup(
            filterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jcb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jcb2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        filterPanel1Layout.setVerticalGroup(
            filterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(filterPanel1Layout.createSequentialGroup()
                        .addGroup(filterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcb2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(filterPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(filterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jcb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(filterPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sp, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void updateFilteredCarList() {
        // Fetch the car data from the database and filter based on the selected color
        String selectedColor = (String) jcb2.getSelectedItem();
        try {
            LinkedList<Car> carList = Car.listCars();

            // Check if the selected color is "-" to display all cars
            if (selectedColor.equals("-")) {
                filteredCarList = new LinkedList<>(carList);
            } else {
                filteredCarList = new LinkedList<>();
                // Iterate over the car list and filter based on the selected color
                for (Car car : carList) {
                    if (car.getColor().equalsIgnoreCase(selectedColor)) {
                        filteredCarList.add(car);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }
    }
    
    private void filterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterKeyTyped
              String searchText = filter.getText().toLowerCase().trim(); // Convert the search text to lowercase and remove leading/trailing spaces

        LinkedList<Car> filteredCarList = new LinkedList<>();

        try {
            LinkedList<Car> carList = Car.listCars(); // Fetch the car data from the database

            // Iterate over the car list and filter based on the search text
            for (Car car : carList) {
                if (car.getModel().toLowerCase().contains(searchText)) {
                    filteredCarList.add(car);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }

        // Clear the existing car card grid
        adminCarFrame1.CarCardGrid.removeAll();

        updateFilteredCarList();

        // Create car card panels for the filtered car list
        for (Car car : filteredCarList) {
            AdminCarCard carCard = new AdminCarCard(car);
            adminCarFrame1.CarCardGrid.add(carCard);
        }

        adminCarFrame1.CarCardGrid.revalidate();
        adminCarFrame1.CarCardGrid.repaint();
    }//GEN-LAST:event_filterKeyTyped

    private void jcb1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb1ItemStateChanged

   String selectedOption = (String) jcb1.getSelectedItem();

        // Clear the existing car card grid
        adminCarFrame1.CarCardGrid.removeAll();

        // Set the layout manager to a GridLayout with 3 columns
        adminCarFrame1.CarCardGrid.setLayout(new GridLayout(0, 2, 30, 30)); // Adjust the spacing as needed

        updateFilteredCarList();
        // Create a copy of the filtered car list
        LinkedList<Car> sortedCarList = new LinkedList<>(filteredCarList);

        // Apply sorting based on the selected option
        if (selectedOption.equals("-")) {
            // No sorting required, display all cars
        } else if (selectedOption.equals("Price - Lower to Higher")) {
            sortedCarList.sort(Comparator.comparingDouble(Car::getPrice));
        } else if (selectedOption.equals("Price - Higher to Lower")) {
            sortedCarList.sort(Comparator.comparingDouble(Car::getPrice).reversed());
        } else if (selectedOption.equals("Unoccupied")) {
            sortedCarList.removeIf(car -> !car.getAvailability().equalsIgnoreCase("Available"));
        } else if (selectedOption.equals("Occupied")) {
            sortedCarList.removeIf(car -> !car.getAvailability().equalsIgnoreCase("Occupied"));
        }

        // Create car card panels for the sorted car list
        for (Car car : sortedCarList) {
            JPanel panelWrapper = new JPanel();
            panelWrapper.setPreferredSize(new Dimension(250, 300)); // Set the desired size for each panel wrapper
            panelWrapper.setMaximumSize(panelWrapper.getPreferredSize()); // Set the maximum size to preserve the size
            panelWrapper.setBackground(new Color(226, 226, 226)); // Set the background color of the panel
            panelWrapper.setLayout(new BorderLayout());

            AdminCarCard carCard = new AdminCarCard(car);
            carCard.setBackground(new Color(226, 226, 226)); // Set the background color of the car card

            panelWrapper.add(carCard, BorderLayout.CENTER);

            adminCarFrame1.CarCardGrid.add(panelWrapper);
        }

        adminCarFrame1.CarCardGrid.revalidate();
        adminCarFrame1.CarCardGrid.repaint();
    }//GEN-LAST:event_jcb1ItemStateChanged

    private void jcb2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb2ItemStateChanged
 String selectedColor = (String) jcb2.getSelectedItem();
        filteredCarList = new LinkedList<>();
        updateFilteredCarList();

        try {
            updateFilteredCarList();
            
            LinkedList<Car> carList = Car.listCars(); // Fetch the car data from the database

            // Check if the selected color is "-" to display all cars
            if (selectedColor.equals("-")) {
                filteredCarList.addAll(carList);
            } else {
                // Iterate over the car list and filter based on the selected color
                for (Car car : carList) {
                    if (car.getColor().equalsIgnoreCase(selectedColor)) {
                        filteredCarList.add(car);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }

        // Clear the existing car card grid
        adminCarFrame1.CarCardGrid.removeAll();

        // Set the layout manager to a GridLayout with 3 columns
        adminCarFrame1.CarCardGrid.setLayout(new GridLayout(0, 2, 30, 30)); // Adjust the spacing as needed

        updateFilteredCarList();

        // Create car card panels for the filtered car list
        for (Car car : filteredCarList) {
            JPanel panelWrapper = new JPanel();
            panelWrapper.setPreferredSize(new Dimension(250, 300)); // Set the desired size for each panel wrapper
            panelWrapper.setMaximumSize(panelWrapper.getPreferredSize()); // Set the maximum size to preserve the size
            panelWrapper.setBackground(new Color(226, 226, 226)); // Set the background color of the panel
            panelWrapper.setLayout(new BorderLayout());

            AdminCarCard carCard = new AdminCarCard(car);
            carCard.setBackground(new Color(226, 226, 226)); // Set the background color of the car card

            panelWrapper.add(carCard, BorderLayout.CENTER);

            adminCarFrame1.CarCardGrid.add(panelWrapper);
        }

        adminCarFrame1.CarCardGrid.revalidate();
        adminCarFrame1.CarCardGrid.repaint();
    }//GEN-LAST:event_jcb2ItemStateChanged

@Override
 protected void paintChildren(Graphics grphcs) {
     Graphics2D g2 = (Graphics2D) grphcs;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
g2.fillRoundRect(0, 0, getWidth(), getHeight(), 0, 0);  
    super.paintChildren(grphcs);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.saad.AdminComponents.AdminCarFrame adminCarFrame1;
    private com.saad.swing.SearchText filter;
    private com.saad.GlobalComponents.FilterPanel filterPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> jcb1;
    private javax.swing.JComboBox<String> jcb2;
    private javax.swing.JScrollPane sp;
    // End of variables declaration//GEN-END:variables
}
